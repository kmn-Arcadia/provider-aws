/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// JobQueueParameters defines the desired state of JobQueue
type JobQueueParameters struct {
	// Region is which region the JobQueue will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// The priority of the job queue. Job queues with a higher priority (or a higher
	// integer value for the priority parameter) are evaluated first when associated
	// with the same compute environment. Priority is determined in descending order.
	// For example, a job queue with a priority value of 10 is given scheduling
	// preference over a job queue with a priority value of 1. All of the compute
	// environments must be either EC2 (EC2 or SPOT) or Fargate (FARGATE or FARGATE_SPOT);
	// EC2 and Fargate compute environments can't be mixed.
	// +kubebuilder:validation:Required
	Priority *int64 `json:"priority"`
	// The Amazon Resource Name (ARN) of the fair share scheduling policy. If this
	// parameter is specified, the job queue uses a fair share scheduling policy.
	// If this parameter isn't specified, the job queue uses a first in, first out
	// (FIFO) scheduling policy. After a job queue is created, you can replace but
	// can't remove the fair share scheduling policy. The format is aws:Partition:batch:Region:Account:scheduling-policy/Name
	// . An example is aws:aws:batch:us-west-2:012345678910:scheduling-policy/MySchedulingPolicy.
	SchedulingPolicyARN *string `json:"schedulingPolicyARN,omitempty"`
	// The tags that you apply to the job queue to help you categorize and organize
	// your resources. Each tag consists of a key and an optional value. For more
	// information, see Tagging your Batch resources (https://docs.aws.amazon.com/batch/latest/userguide/using-tags.html)
	// in Batch User Guide.
	Tags                     map[string]*string `json:"tags,omitempty"`
	CustomJobQueueParameters `json:",inline"`
}

// JobQueueSpec defines the desired state of JobQueue
type JobQueueSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       JobQueueParameters `json:"forProvider"`
}

// JobQueueObservation defines the observed state of JobQueue
type JobQueueObservation struct {
	// The Amazon Resource Name (ARN) of the job queue.
	JobQueueARN *string `json:"jobQueueARN,omitempty"`
	// The name of the job queue.
	JobQueueName *string `json:"jobQueueName,omitempty"`
	// Describes the ability of the queue to accept new jobs. If the job queue state
	// is ENABLED, it's able to accept jobs. If the job queue state is DISABLED,
	// new jobs can't be added to the queue, but jobs already in the queue can finish.
	State *string `json:"state,omitempty"`
	// The status of the job queue (for example, CREATING or VALID).
	Status *string `json:"status,omitempty"`
}

// JobQueueStatus defines the observed state of JobQueue.
type JobQueueStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          JobQueueObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// JobQueue is the Schema for the JobQueues API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type JobQueue struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              JobQueueSpec   `json:"spec"`
	Status            JobQueueStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// JobQueueList contains a list of JobQueues
type JobQueueList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []JobQueue `json:"items"`
}

// Repository type metadata.
var (
	JobQueueKind             = "JobQueue"
	JobQueueGroupKind        = schema.GroupKind{Group: CRDGroup, Kind: JobQueueKind}.String()
	JobQueueKindAPIVersion   = JobQueueKind + "." + GroupVersion.String()
	JobQueueGroupVersionKind = GroupVersion.WithKind(JobQueueKind)
)

func init() {
	SchemeBuilder.Register(&JobQueue{}, &JobQueueList{})
}
