/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package computeenvironment

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/batch"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/batch/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeComputeEnvironmentsInput returns input for read
// operation.
func GenerateDescribeComputeEnvironmentsInput(cr *svcapitypes.ComputeEnvironment) *svcsdk.DescribeComputeEnvironmentsInput {
	res := &svcsdk.DescribeComputeEnvironmentsInput{}

	return res
}

// GenerateComputeEnvironment returns the current state in the form of *svcapitypes.ComputeEnvironment.
func GenerateComputeEnvironment(resp *svcsdk.DescribeComputeEnvironmentsOutput) *svcapitypes.ComputeEnvironment {
	cr := &svcapitypes.ComputeEnvironment{}

	found := false
	for _, elem := range resp.ComputeEnvironments {
		if elem.ComputeEnvironmentArn != nil {
			cr.Status.AtProvider.ComputeEnvironmentARN = elem.ComputeEnvironmentArn
		} else {
			cr.Status.AtProvider.ComputeEnvironmentARN = nil
		}
		if elem.ComputeEnvironmentName != nil {
			cr.Status.AtProvider.ComputeEnvironmentName = elem.ComputeEnvironmentName
		} else {
			cr.Status.AtProvider.ComputeEnvironmentName = nil
		}
		if elem.ComputeResources != nil {
			f2 := &svcapitypes.ComputeResource{}
			if elem.ComputeResources.AllocationStrategy != nil {
				f2.AllocationStrategy = elem.ComputeResources.AllocationStrategy
			}
			if elem.ComputeResources.BidPercentage != nil {
				f2.BidPercentage = elem.ComputeResources.BidPercentage
			}
			if elem.ComputeResources.Ec2Configuration != nil {
				f2f2 := []*svcapitypes.EC2Configuration{}
				for _, f2f2iter := range elem.ComputeResources.Ec2Configuration {
					f2f2elem := &svcapitypes.EC2Configuration{}
					if f2f2iter.ImageIdOverride != nil {
						f2f2elem.ImageIDOverride = f2f2iter.ImageIdOverride
					}
					if f2f2iter.ImageType != nil {
						f2f2elem.ImageType = f2f2iter.ImageType
					}
					f2f2 = append(f2f2, f2f2elem)
				}
				f2.EC2Configuration = f2f2
			}
			if elem.ComputeResources.Ec2KeyPair != nil {
				f2.EC2KeyPair = elem.ComputeResources.Ec2KeyPair
			}
			if elem.ComputeResources.InstanceTypes != nil {
				f2f4 := []*string{}
				for _, f2f4iter := range elem.ComputeResources.InstanceTypes {
					var f2f4elem string
					f2f4elem = *f2f4iter
					f2f4 = append(f2f4, &f2f4elem)
				}
				f2.InstanceTypes = f2f4
			}
			if elem.ComputeResources.LaunchTemplate != nil {
				f2f5 := &svcapitypes.LaunchTemplateSpecification{}
				if elem.ComputeResources.LaunchTemplate.LaunchTemplateId != nil {
					f2f5.LaunchTemplateID = elem.ComputeResources.LaunchTemplate.LaunchTemplateId
				}
				if elem.ComputeResources.LaunchTemplate.LaunchTemplateName != nil {
					f2f5.LaunchTemplateName = elem.ComputeResources.LaunchTemplate.LaunchTemplateName
				}
				if elem.ComputeResources.LaunchTemplate.Version != nil {
					f2f5.Version = elem.ComputeResources.LaunchTemplate.Version
				}
				f2.LaunchTemplate = f2f5
			}
			if elem.ComputeResources.MaxvCpus != nil {
				f2.MaxvCPUs = elem.ComputeResources.MaxvCpus
			}
			if elem.ComputeResources.MinvCpus != nil {
				f2.MinvCPUs = elem.ComputeResources.MinvCpus
			}
			if elem.ComputeResources.PlacementGroup != nil {
				f2.PlacementGroup = elem.ComputeResources.PlacementGroup
			}
			if elem.ComputeResources.Tags != nil {
				f2f9 := map[string]*string{}
				for f2f9key, f2f9valiter := range elem.ComputeResources.Tags {
					var f2f9val string
					f2f9val = *f2f9valiter
					f2f9[f2f9key] = &f2f9val
				}
				f2.Tags = f2f9
			}
			if elem.ComputeResources.Type != nil {
				f2.Type = elem.ComputeResources.Type
			}
			cr.Spec.ForProvider.ComputeResources = f2
		} else {
			cr.Spec.ForProvider.ComputeResources = nil
		}
		if elem.State != nil {
			cr.Status.AtProvider.State = elem.State
		} else {
			cr.Status.AtProvider.State = nil
		}
		if elem.Status != nil {
			cr.Status.AtProvider.Status = elem.Status
		} else {
			cr.Status.AtProvider.Status = nil
		}
		if elem.Tags != nil {
			f8 := map[string]*string{}
			for f8key, f8valiter := range elem.Tags {
				var f8val string
				f8val = *f8valiter
				f8[f8key] = &f8val
			}
			cr.Spec.ForProvider.Tags = f8
		} else {
			cr.Spec.ForProvider.Tags = nil
		}
		if elem.Type != nil {
			cr.Spec.ForProvider.Type = elem.Type
		} else {
			cr.Spec.ForProvider.Type = nil
		}
		if elem.UnmanagedvCpus != nil {
			cr.Spec.ForProvider.UnmanagedvCPUs = elem.UnmanagedvCpus
		} else {
			cr.Spec.ForProvider.UnmanagedvCPUs = nil
		}
		found = true
		break
	}
	if !found {
		return cr
	}

	return cr
}

// GenerateCreateComputeEnvironmentInput returns a create input.
func GenerateCreateComputeEnvironmentInput(cr *svcapitypes.ComputeEnvironment) *svcsdk.CreateComputeEnvironmentInput {
	res := &svcsdk.CreateComputeEnvironmentInput{}

	if cr.Spec.ForProvider.ComputeResources != nil {
		f0 := &svcsdk.ComputeResource{}
		if cr.Spec.ForProvider.ComputeResources.AllocationStrategy != nil {
			f0.SetAllocationStrategy(*cr.Spec.ForProvider.ComputeResources.AllocationStrategy)
		}
		if cr.Spec.ForProvider.ComputeResources.BidPercentage != nil {
			f0.SetBidPercentage(*cr.Spec.ForProvider.ComputeResources.BidPercentage)
		}
		if cr.Spec.ForProvider.ComputeResources.EC2Configuration != nil {
			f0f2 := []*svcsdk.Ec2Configuration{}
			for _, f0f2iter := range cr.Spec.ForProvider.ComputeResources.EC2Configuration {
				f0f2elem := &svcsdk.Ec2Configuration{}
				if f0f2iter.ImageIDOverride != nil {
					f0f2elem.SetImageIdOverride(*f0f2iter.ImageIDOverride)
				}
				if f0f2iter.ImageType != nil {
					f0f2elem.SetImageType(*f0f2iter.ImageType)
				}
				f0f2 = append(f0f2, f0f2elem)
			}
			f0.SetEc2Configuration(f0f2)
		}
		if cr.Spec.ForProvider.ComputeResources.EC2KeyPair != nil {
			f0.SetEc2KeyPair(*cr.Spec.ForProvider.ComputeResources.EC2KeyPair)
		}
		if cr.Spec.ForProvider.ComputeResources.InstanceTypes != nil {
			f0f4 := []*string{}
			for _, f0f4iter := range cr.Spec.ForProvider.ComputeResources.InstanceTypes {
				var f0f4elem string
				f0f4elem = *f0f4iter
				f0f4 = append(f0f4, &f0f4elem)
			}
			f0.SetInstanceTypes(f0f4)
		}
		if cr.Spec.ForProvider.ComputeResources.LaunchTemplate != nil {
			f0f5 := &svcsdk.LaunchTemplateSpecification{}
			if cr.Spec.ForProvider.ComputeResources.LaunchTemplate.LaunchTemplateID != nil {
				f0f5.SetLaunchTemplateId(*cr.Spec.ForProvider.ComputeResources.LaunchTemplate.LaunchTemplateID)
			}
			if cr.Spec.ForProvider.ComputeResources.LaunchTemplate.LaunchTemplateName != nil {
				f0f5.SetLaunchTemplateName(*cr.Spec.ForProvider.ComputeResources.LaunchTemplate.LaunchTemplateName)
			}
			if cr.Spec.ForProvider.ComputeResources.LaunchTemplate.Version != nil {
				f0f5.SetVersion(*cr.Spec.ForProvider.ComputeResources.LaunchTemplate.Version)
			}
			f0.SetLaunchTemplate(f0f5)
		}
		if cr.Spec.ForProvider.ComputeResources.MaxvCPUs != nil {
			f0.SetMaxvCpus(*cr.Spec.ForProvider.ComputeResources.MaxvCPUs)
		}
		if cr.Spec.ForProvider.ComputeResources.MinvCPUs != nil {
			f0.SetMinvCpus(*cr.Spec.ForProvider.ComputeResources.MinvCPUs)
		}
		if cr.Spec.ForProvider.ComputeResources.PlacementGroup != nil {
			f0.SetPlacementGroup(*cr.Spec.ForProvider.ComputeResources.PlacementGroup)
		}
		if cr.Spec.ForProvider.ComputeResources.Tags != nil {
			f0f9 := map[string]*string{}
			for f0f9key, f0f9valiter := range cr.Spec.ForProvider.ComputeResources.Tags {
				var f0f9val string
				f0f9val = *f0f9valiter
				f0f9[f0f9key] = &f0f9val
			}
			f0.SetTags(f0f9)
		}
		if cr.Spec.ForProvider.ComputeResources.Type != nil {
			f0.SetType(*cr.Spec.ForProvider.ComputeResources.Type)
		}
		res.SetComputeResources(f0)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f1 := map[string]*string{}
		for f1key, f1valiter := range cr.Spec.ForProvider.Tags {
			var f1val string
			f1val = *f1valiter
			f1[f1key] = &f1val
		}
		res.SetTags(f1)
	}
	if cr.Spec.ForProvider.Type != nil {
		res.SetType(*cr.Spec.ForProvider.Type)
	}
	if cr.Spec.ForProvider.UnmanagedvCPUs != nil {
		res.SetUnmanagedvCpus(*cr.Spec.ForProvider.UnmanagedvCPUs)
	}

	return res
}

// GenerateUpdateComputeEnvironmentInput returns an update input.
func GenerateUpdateComputeEnvironmentInput(cr *svcapitypes.ComputeEnvironment) *svcsdk.UpdateComputeEnvironmentInput {
	res := &svcsdk.UpdateComputeEnvironmentInput{}

	if cr.Spec.ForProvider.ComputeResources != nil {
		f1 := &svcsdk.ComputeResourceUpdate{}
		if cr.Spec.ForProvider.ComputeResources.MaxvCPUs != nil {
			f1.SetMaxvCpus(*cr.Spec.ForProvider.ComputeResources.MaxvCPUs)
		}
		if cr.Spec.ForProvider.ComputeResources.MinvCPUs != nil {
			f1.SetMinvCpus(*cr.Spec.ForProvider.ComputeResources.MinvCPUs)
		}
		res.SetComputeResources(f1)
	}
	if cr.Spec.ForProvider.UnmanagedvCPUs != nil {
		res.SetUnmanagedvCpus(*cr.Spec.ForProvider.UnmanagedvCPUs)
	}

	return res
}

// GenerateDeleteComputeEnvironmentInput returns a deletion input.
func GenerateDeleteComputeEnvironmentInput(cr *svcapitypes.ComputeEnvironment) *svcsdk.DeleteComputeEnvironmentInput {
	res := &svcsdk.DeleteComputeEnvironmentInput{}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "ComputeEnvironmentNotFoundException"
}
